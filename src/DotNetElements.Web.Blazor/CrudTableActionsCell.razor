@inherits MudComponentBase

@typeparam TKey where TKey : notnull, IEquatable<TKey>
@typeparam TModel where TModel : IModel<TKey>
@typeparam TDetails where TDetails : ModelDetails

@if (SimpleTable)
{
    <td class="py-0 pl-2" style="@($"width: {Width}px;")">
        <CrudTableActionsButton OnClick="() => OnEditEntry.InvokeAsync(Context)" Icon="@Icons.Material.Outlined.Edit" Color="Color.Warning" />
        <CrudTableActionsButton OnClick="() => OnDeleteEntry.InvokeAsync(Context)" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" />
        <CrudTableActionsButton OnClick="() => OnShowEntryDetails.InvokeAsync(Context)" Icon="@Icons.Material.Outlined.Info" Color="Color.Default" />
        @ChildContent
    </td>
}
else
{
    <MudTd Class="py-0 pl-2" Style="@($"width: {Width}px;")" DataLabel="Actions">
        <CrudTableActionsButton OnClick="() => OnEditEntry.InvokeAsync(Context)" Icon="@Icons.Material.Outlined.Edit" Color="Color.Warning" />
        <CrudTableActionsButton OnClick="() => OnDeleteEntry.InvokeAsync(Context)" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" />
        <CrudTableActionsButton OnClick="() => OnShowEntryDetails.InvokeAsync(Context)" Icon="@Icons.Material.Outlined.Info" Color="Color.Default" />
        @ChildContent
    </MudTd>
}

@code
{
    [Parameter, EditorRequired]
    public ModelWithDetails<TModel, TDetails> Context { get; set; } = default!;

    [Parameter, EditorRequired]
    public EventCallback<ModelWithDetails<TModel, TDetails>> OnEditEntry { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ModelWithDetails<TModel, TDetails>> OnDeleteEntry { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<ModelWithDetails<TModel, TDetails>> OnShowEntryDetails { get; set; }

    [Parameter]
    public bool SimpleTable { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public int Width { get; set; } = 140;
}